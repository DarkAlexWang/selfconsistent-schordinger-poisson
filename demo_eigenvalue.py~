#Feras Aldahlawi
#A simple eigenvalue solver. (Inspired by fenics tutorial)

from dolfin import *


# Define mesh, function space
gaas_thickness1 = 150.0
algaas_thickness1 = 200.
algaas_thickness2 = 50.
gaas_thickness2 = 500.

total_width = gaas_thickness1 + algaas_thickness1  + algaas_thickness2 + gaas_thickness2

#MESH
nx = 10;  ny = 10
x0, y0 = 0.0, 0.0
xf, yf = total_width, total_width
mesh = RectangleMesh(x0, y0, xf, yf, nx, ny)
V = FunctionSpace(mesh, "CG", 1)

# Define basis and bilinear form
u = TrialFunction(V)
v = TestFunction(V)
a = dot(grad(u), grad(v))*dx

# Assemble stiffness form
A = PETScMatrix()
assemble(a, tensor=A)

# Assemble right-hand side
B = PETScMatrix()
assemble(u*v*dx, tensor=B)
# Create eigensolver
eigensolver = SLEPcEigenSolver(A, B)

#
# Search for lowest frequency eigenvalues
#
eigensolver.parameters["spectrum"] = "smallest magnitude"
#eigensolver.parameters["solver"] = "arnoldi"
eigensolver.parameters["spectral_shift"] = 1.0e-2
eigensolver.parameters["spectral_transform"] = "shift-and-invert"


# Compute 20 eigenvalues of A x = \lambda x
print "Computing eigenvalues for matrix of rank %d. This can take a minute." % (A.size(0))
eigensolver.solve(20)

# Extract first non-zero eigenvalue
r, c, rx, cx = eigensolver.get_eigenpair(1)

print "Smallest non-zero eigenvalue: ", r

# Initialize function and assign eigenvector
u = Function(V)
u.vector()[:] = rx 

# Plot eigenfunction
plot(u)
interactive()
